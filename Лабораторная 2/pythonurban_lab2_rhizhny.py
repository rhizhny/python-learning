# -*- coding: utf-8 -*-
"""PythonUrban_lab2_rhizhny.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i237pb5lPnM6PaqC5snlsok7PIT4m1Yf

# Итоговый проект. Улицы. Объекты культурного наследия.
"""

!pip install geopandas
!pip install mapclassify
!pip install osmnx

import numpy as np
import pandas as pd
import geopandas as gpd
import osmnx as ox
import json

TILES = "CartoDB positron"  # Название подложки для карт

TERRITORY_NAME = "Выборгский район, Санкт-Петербург"  # название территории для которой будут строиться слои
OSM_ID = "R1114354"  # https://www.openstreetmap.org/relation/1114354
OSM_URL = "https://osm.org/relation/1114354"
KGIOP_FILE_URL = "https://github.com/rhizhny/python-learning/raw/0d83d2ee034fdfa46ea100cd1fafdc91ff1b8e60/kgiop_objects.geojson"  # ссылка на слой с объектами культурного наследия
#https://github.com/rhizhny/python-learning/blob/main/geojson%20слои/kgiop_objects.geojson # кириллица в пути - ошибка кодировки.
#KGIOP_FILE_URL = KGIOP_FILE_URL.encode('utf-8') # не помогло.
STREETS_FILE_URL = "https://github.com/rhizhny/python-learning/raw/0d83d2ee034fdfa46ea100cd1fafdc91ff1b8e60/streets.geojson"  # ссылка на слой с улицами
#STREETS_FILE_URL = STREETS_FILE_URL.encode('utf-8')

"""## Территория

### Загрузка территории из OSM (Extract)
"""

district = ox.geocode_to_gdf(TERRITORY_NAME)
#district = ox.geocode_to_gdf([OSM_ID], by_osmid=True)
district

district.explore(tiles=TILES)

"""## Улицы

### Загрузка файла с улицами (Extract)
"""

gdf = gpd.read_file(STREETS_FILE_URL, mask=district)
gdf

gdf.explore(tiles=TILES)

"""### Обработка данных с улицами (Transform)"""

# TODO сгруппировать и объединить геометрии с одинаковыми названиями
gdf = gdf.dissolve(by="name")
gdf

"""### Сохранение слоя с улицами (Load)"""

rename_columns = {
    "name": "Наименование"
}
gdf.rename(columns=rename_columns, inplace=True)

gdf.index.rename("Наименование улицы", inplace=True)

gdf.head()

gdf.crs  # получить проекцию координат
# Географические. Где координаты даны в виде долготы и широты. Например, EPSG:4326. Проще работать на картах.
# Метрические. Где координаты в метрах. Например, EPSG:3857. Точнее проводить вычисления показателей.

gdf.to_crs(4326).to_file('streets.geojson', driver='GeoJSON')

"""## Объекты культурного наследия

### Загрузка объектов культурного наследия (Extract)
"""

gdf2 = gpd.read_file(KGIOP_FILE_URL, mask=district)
gdf2.head()

gdf2.explore(tiles=TILES)

"""### Обработка объектов культурного наследия (Transform)"""

# TODO добавить два столбца lon и lat, в которых будут долгота и широта 
gdf2["lon"] = gdf2.to_crs(3857).geometry.centroid.to_crs(4326).x
gdf2["lat"] = gdf2.to_crs(3857).geometry.centroid.to_crs(4326).y

gdf2.head()

"""### Сохранение слоя с объектами культурного наследия (Load)"""

for key in gdf2:
    print(key)

rename_columns = {
    "ensemble_name": "Наименование ансамбля",
    "object_name": "Наименование объекта",
    "occurrence_time": "Дата постройки",
    "object_location": "Адрес",
    "historical_category": "Категории историко-культурного значения",
    "normative_act": "Нормативный акт",
    "object_type": "Тип объекта",
    "lon": "Долгота",
    "lat": "Широта"
}
gdf2.rename(columns=rename_columns, inplace=True)
gdf2.head()

gdf2.to_crs(4326).to_file('kgiop_objects.geojson', driver='GeoJSON')